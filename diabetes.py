# -*- coding: utf-8 -*-
"""Diabetes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B7tmlJZMed_eYPg1I_e4HWzsZFEBJcaL

# Analysis_of_Diabetes
"""

#importing needed libraries
import pandas as pd
import numpy as nd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler

df=pd.read_csv("/content/diabetes.csv")
df

#Information about the data frame
df.info()

"""# Inferences:
   
   -There are 768 entries in my dataFrame

   -There are 9 coiomns in my dataFrame

   -There are no null values in my dataFame

   -There are no object type in my dataFrame
"""

# Summary Statistics of the Data Frame
df.describe()

#Checking for NULL values
df.isnull().sum()

#Checking number of people in the dataset that are diabetic and non-diabetic.
df["Outcome"].value_counts()

"""Here,0 is the Non-Diabetic
     1 is the Diabetic
     
"""

#Droping the Outcome column in the dataset
X=df.drop(columns='Outcome',axis=1)
Y=df['Outcome']

print(X)

print(Y)

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()

x=scaler.fit_transform(x)

y=df['Outcome']

x

y

from sklearn.model_selection import train_test_split

xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.3, random_state=1)

from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier(n_neighbors=1)

knn.fit(xtrain, ytrain)

ypred = knn.predict(xtest)

ypred

ytest

from sklearn.metrics import confusion_matrix, classification_report

print(confusion_matrix(ytest, ypred))
print(classification_report(ytest, ypred))

import numpy as np
import matplotlib.pyplot as plt

error_rate = []

for i in range(1, 40):
  knn = KNeighborsClassifier(n_neighbors=i)
  knn.fit(xtrain, ytrain)
  pred_i = knn.predict(xtest)
  error_rate.append(np.mean(pred_i !=ytest))

plt.figure(figsize=(10, 6))
plt.plot(range(1, 40), error_rate, color='black', linestyle='--',markersize=12, markerfacecolor='red', marker='o')
plt.title('K vs Error rate')

plt.xlabel('K')
plt.ylabel('Error rate')

knn = KNeighborsClassifier(n_neighbors=12)
knn.fit(xtrain, ytrain)
pred_i = knn.predict(xtest)
print(confusion_matrix(ytest, ypred))
print(classification_report(ytest, ypred))

!apt-get install texlive-xetex texlive-fonts-recommended texlive-generic-recommended
!apt-get install inkscape